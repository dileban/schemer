#+TITLE: Schemer
#+AUTHOR: Dileban Karunamoorthy
* Definitions
** S-Expression

A symbolic expression, or S-expression, sexpr, sexp for short, in the
Lisp family of languages denotes either an atom or a list. 

+ Atoms are immutable objects that represent a number or a symbol.
+ Lists represent data or code, and are modifiable (depending on the
  dialect).

When representing code, a list is written in the Polish (prefix)
notation, where the first s-expression is a /function/ or an
/operator/.

** Pairs | Dotted Pairs | Cons Cells

+ Lists are expressed as /cons cells/ in the form =(sexp-1 . sexp-2)=.
+ Cons cells are ordered pairs and thus S-expressions are binary
  trees.
+ Nested cons cells such as =(a . (b . (c . (d . NIL))))= can be
  written in a simpler form as =(a b c d)=.
+ The ordered pair (also called the /dotted pair/ notation) is also
  referred to as the /internal/ representation, while the simpler form
  is syntactic sugar and referred to as the /external/ representation.
+ =NIL= or =()= is a symbol for termination.

In memory, the cons cells are represented as linked lists. Each node
in the list is a single cons cell, where the first S-expression is an
atom or a list and second S-expression represents an atom or pointer
to the /next/ cons cell. The list is terminated with NIL.

In the language, we describe a cons cell as consisting of two parts,
the /car/ and a /cdr/. The =car= points to the first element in the
pair and the =cdr= points to the rest of the list.

The length of a list is the number of dotted pairs in the list. The
empty list (=NIL= or =()=) has length =0=. The elements in the list
are all the =car= elements of successive pairs.

Strictly speaking, a pair is a list if it is terminated with the empty
list (=NIL= or =()=).

** Propert Lists and Improper Lists

A /proper/ list is a sequence of pairs that end with the empty
list. On the contrary an improper list does not terminate with an
empty list.

Examples of proper lists:

#+BEGIN_SRC racket
  ;; The empty list, ()
  '()

  ;; A list with two elements, (1 2)
  '(1 2)

  ;; The list (1)
  (cons 1 '())

  ;; The list (1 2)
  (cons 1 '(2))

  ;; The list (1 2 3)
  (cons 1 (cons 2 '(3)))

  ;; The list (4 5 6)
  (cons 4 (cons 5 (cons 6 '())))
#+END_SRC


* References

+ [[https://icem.folkwang-uni.de/~finnendahl/cm_kurse/doc/schintro/schintro_93.html][Proper and Improper Lists]]
